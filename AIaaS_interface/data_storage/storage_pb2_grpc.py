# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from data_storage import storage_pb2 as data__storage_dot_storage__pb2


class DataStorageStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterUser = channel.unary_unary(
                '/data_storage.DataStorage/RegisterUser',
                request_serializer=data__storage_dot_storage__pb2.RegisterUserRequest.SerializeToString,
                response_deserializer=data__storage_dot_storage__pb2.RegisterUserResponse.FromString,
                )
        self.DeregisterUser = channel.unary_unary(
                '/data_storage.DataStorage/DeregisterUser',
                request_serializer=data__storage_dot_storage__pb2.DeregisterUserRequest.SerializeToString,
                response_deserializer=data__storage_dot_storage__pb2.DeregisterUserResponse.FromString,
                )
        self.SetVolume = channel.unary_unary(
                '/data_storage.DataStorage/SetVolume',
                request_serializer=data__storage_dot_storage__pb2.SetVolumeRequest.SerializeToString,
                response_deserializer=data__storage_dot_storage__pb2.SetVolumeResponse.FromString,
                )
        self.SetSystemVolume = channel.unary_unary(
                '/data_storage.DataStorage/SetSystemVolume',
                request_serializer=data__storage_dot_storage__pb2.SetSystemVolumeRequest.SerializeToString,
                response_deserializer=data__storage_dot_storage__pb2.SetSystemVolumeResponse.FromString,
                )
        self.GetVolumeReport = channel.unary_unary(
                '/data_storage.DataStorage/GetVolumeReport',
                request_serializer=data__storage_dot_storage__pb2.GetVolumeRequest.SerializeToString,
                response_deserializer=data__storage_dot_storage__pb2.GetVolumeResponse.FromString,
                )
        self.CreateFolder = channel.unary_unary(
                '/data_storage.DataStorage/CreateFolder',
                request_serializer=data__storage_dot_storage__pb2.CreateFolderRequest.SerializeToString,
                response_deserializer=data__storage_dot_storage__pb2.CreateFolderResponse.FromString,
                )
        self.Remove = channel.unary_unary(
                '/data_storage.DataStorage/Remove',
                request_serializer=data__storage_dot_storage__pb2.RemoveRequest.SerializeToString,
                response_deserializer=data__storage_dot_storage__pb2.RemoveResponse.FromString,
                )
        self.ForceRemove = channel.unary_unary(
                '/data_storage.DataStorage/ForceRemove',
                request_serializer=data__storage_dot_storage__pb2.ForceRemoveRequest.SerializeToString,
                response_deserializer=data__storage_dot_storage__pb2.ForceRemoveResponse.FromString,
                )
        self.EmptyRecycleBin = channel.unary_unary(
                '/data_storage.DataStorage/EmptyRecycleBin',
                request_serializer=data__storage_dot_storage__pb2.EmptyRecycleBinRequest.SerializeToString,
                response_deserializer=data__storage_dot_storage__pb2.EmptyRecycleBinResponse.FromString,
                )
        self.BrowseData = channel.unary_unary(
                '/data_storage.DataStorage/BrowseData',
                request_serializer=data__storage_dot_storage__pb2.BrowseDataRequest.SerializeToString,
                response_deserializer=data__storage_dot_storage__pb2.BrowseDataResponse.FromString,
                )
        self.Search = channel.unary_unary(
                '/data_storage.DataStorage/Search',
                request_serializer=data__storage_dot_storage__pb2.SearchRequest.SerializeToString,
                response_deserializer=data__storage_dot_storage__pb2.SearchResponse.FromString,
                )
        self.GetSystemicReport = channel.unary_unary(
                '/data_storage.DataStorage/GetSystemicReport',
                request_serializer=data__storage_dot_storage__pb2.GetSystemicReportRequest.SerializeToString,
                response_deserializer=data__storage_dot_storage__pb2.GetSystemicReportResponse.FromString,
                )
        self.Copy = channel.unary_unary(
                '/data_storage.DataStorage/Copy',
                request_serializer=data__storage_dot_storage__pb2.CopyRequest.SerializeToString,
                response_deserializer=data__storage_dot_storage__pb2.CopyResponse.FromString,
                )
        self.Cut = channel.unary_unary(
                '/data_storage.DataStorage/Cut',
                request_serializer=data__storage_dot_storage__pb2.CutRequest.SerializeToString,
                response_deserializer=data__storage_dot_storage__pb2.CutResponse.FromString,
                )
        self.DownloadFile = channel.unary_stream(
                '/data_storage.DataStorage/DownloadFile',
                request_serializer=data__storage_dot_storage__pb2.DownloadFileRequest.SerializeToString,
                response_deserializer=data__storage_dot_storage__pb2.DownloadFileResponse.FromString,
                )
        self.UploadFile = channel.stream_unary(
                '/data_storage.DataStorage/UploadFile',
                request_serializer=data__storage_dot_storage__pb2.UploadFileRequest.SerializeToString,
                response_deserializer=data__storage_dot_storage__pb2.UploadFileResponse.FromString,
                )


class DataStorageServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterUser(self, request, context):
        """A simple RPC used for registering new users. 
        username is obtained from input and the result will be 
        successful if the username isn't already taken.
        username shouldn't contain whitespace or *, ?, $, ', ", etc characters.
        In case of failure request will be aborted with proper message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeregisterUser(self, request, context):
        """A simple RPC used for removing a specific user. 
        successful if the username is already registered.
        In case of failure request will be aborted with proper message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetVolume(self, request, context):
        """A simple RPC used for setting the volume limit
        for a specified username. 
        Request will be failed if the username doesn't exist or 
        the requested volume is less than the used volume of the user.
        In case of failure request will be aborted with proper message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSystemVolume(self, request, context):
        """A simple RPC used for setting the total_volume and over_subscription_rate 
        of the system. 
        The total size that is possible to allocate among users deriveds from 
        the multiplication of over_subscription_rate and actual size of the system.
        fails if the new size of the system is less than the sum of previously allocated 
        volumes. 
        In case of failure request will be aborted with proper message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVolumeReport(self, request, context):
        """A simple RPC used for getting the amount of used, total and remaing
        volume for the specified username. 
        request will fail if the username isn't registered.
        In case of failure request will be aborted with proper message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateFolder(self, request, context):
        """A simple RPC used for creating a new folder in the specified path
        for the spcified useranme
        fails if: 
        - username isn't registered
        - the path can't be reached(missing folder between the path)
        - the destination folder contains a folder with the same name. 
        - the folder name is recycleBin and the path is /username
        In case of failure request will be aborted with proper message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Remove(self, request, context):
        """A simple RPC used for deleting a content in the specified path 
        for the specified username.
        fails if: 
        - username isn't registered
        - the specified path doesn't exist
        - the specified folder is not empty.
        - the user doesn't have access to this path
        - the user tries to remove recycleBin or base folder
        NOTE that the removed file or folder will be stored in recycleBin. 
        In case of failure request will be aborted with proper message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ForceRemove(self, request, context):
        """A simple RPC used for deleting a content in the specified path 
        for the specified username.
        fails if: 
        - username isn't registered
        - the specified path doesn't exist
        - the user doesn't have access to this path
        - the user tries to remove recycleBin or base folder
        NOTE that the different between Remove and ForceRemove is that 
        ForceRemove can remove the folder with other contents in it and 
        the removed folder will be in recycleBin with its contents as 
        structured as before.
        In case of failure request will be aborted with proper message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EmptyRecycleBin(self, request, context):
        """A simple RPC used for emptying the recycleBin folder 
        for the specified username. 
        fails if username isn't registered. 
        In case of failure request will be aborted with proper message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BrowseData(self, request, context):
        """A simple RPC used for browsing the data of the specified username. 
        obtains the base path and username from the input and 
        returns the list of files and folders created in the base path.
        In case of failure request will be aborted with proper message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Search(self, request, context):
        """A simple RPC used for check if a specified folder or file is uploaded
        for the specified user.
        fails if: 
        - the user is not registered. 
        and if the content doesn't exist in the user's filesystem, 
        an empty path will be returned.
        In case of failure request will be aborted with proper message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSystemicReport(self, request, context):
        """A simple RPC used for getting the report of the general disk usage of the system.. 
        no input is required. 
        result contains the status of the system.
        In case of failure request will be aborted with proper message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Copy(self, request, context):
        """A simple rpc used for copying a path from a source to a destination.
        fails if:
        - the username isn't registered prior to the action.
        - the source or destination path doesn't exist in the user's filesystem.
        - the username doesn't have access to the source or destination path. 
        - there isn't enough space for the copying action to be completed. 
        - the destination path basename is a file. 
        - source and destination paths point at the same place. 
        - a content with same name exists in the destination path. 
        In case of the failure the rpc call is aborted and a proper message is shown to user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Cut(self, request, context):
        """A simple rpc used for cutting a path from a source and pasting it to a destination.
        fails if:
        - the username isn't registered prior to the action.
        - the source or destination path doesn't exist in the user's filesystem.
        - the username doesn't have access to the source or destination path. 
        - there isn't enough space for the copying action to be completed. 
        - the destination path basename is a file. 
        - source and destination paths point at the same place. 
        - a content with same name exists in the destination path. 
        In case of the failure the rpc call is aborted and a proper message is shown to user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadFile(self, request, context):
        """A server-to-client RPC, used for downloading the specified file. 
        A byte stream which contains the file will be returned if all the above 
        information is correctly specified.
        In case of failure request will be aborted with proper message 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadFile(self, request_iterator, context):
        """A client-to-server RPC, used for uploading the input data into the system. 
        obtains file metadata and chunk_bytes from input stream and returns 
        the path in which the data is stored (virtual path of the user).
        In case of failure request will be aborted with proper message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataStorageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUser,
                    request_deserializer=data__storage_dot_storage__pb2.RegisterUserRequest.FromString,
                    response_serializer=data__storage_dot_storage__pb2.RegisterUserResponse.SerializeToString,
            ),
            'DeregisterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeregisterUser,
                    request_deserializer=data__storage_dot_storage__pb2.DeregisterUserRequest.FromString,
                    response_serializer=data__storage_dot_storage__pb2.DeregisterUserResponse.SerializeToString,
            ),
            'SetVolume': grpc.unary_unary_rpc_method_handler(
                    servicer.SetVolume,
                    request_deserializer=data__storage_dot_storage__pb2.SetVolumeRequest.FromString,
                    response_serializer=data__storage_dot_storage__pb2.SetVolumeResponse.SerializeToString,
            ),
            'SetSystemVolume': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSystemVolume,
                    request_deserializer=data__storage_dot_storage__pb2.SetSystemVolumeRequest.FromString,
                    response_serializer=data__storage_dot_storage__pb2.SetSystemVolumeResponse.SerializeToString,
            ),
            'GetVolumeReport': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVolumeReport,
                    request_deserializer=data__storage_dot_storage__pb2.GetVolumeRequest.FromString,
                    response_serializer=data__storage_dot_storage__pb2.GetVolumeResponse.SerializeToString,
            ),
            'CreateFolder': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateFolder,
                    request_deserializer=data__storage_dot_storage__pb2.CreateFolderRequest.FromString,
                    response_serializer=data__storage_dot_storage__pb2.CreateFolderResponse.SerializeToString,
            ),
            'Remove': grpc.unary_unary_rpc_method_handler(
                    servicer.Remove,
                    request_deserializer=data__storage_dot_storage__pb2.RemoveRequest.FromString,
                    response_serializer=data__storage_dot_storage__pb2.RemoveResponse.SerializeToString,
            ),
            'ForceRemove': grpc.unary_unary_rpc_method_handler(
                    servicer.ForceRemove,
                    request_deserializer=data__storage_dot_storage__pb2.ForceRemoveRequest.FromString,
                    response_serializer=data__storage_dot_storage__pb2.ForceRemoveResponse.SerializeToString,
            ),
            'EmptyRecycleBin': grpc.unary_unary_rpc_method_handler(
                    servicer.EmptyRecycleBin,
                    request_deserializer=data__storage_dot_storage__pb2.EmptyRecycleBinRequest.FromString,
                    response_serializer=data__storage_dot_storage__pb2.EmptyRecycleBinResponse.SerializeToString,
            ),
            'BrowseData': grpc.unary_unary_rpc_method_handler(
                    servicer.BrowseData,
                    request_deserializer=data__storage_dot_storage__pb2.BrowseDataRequest.FromString,
                    response_serializer=data__storage_dot_storage__pb2.BrowseDataResponse.SerializeToString,
            ),
            'Search': grpc.unary_unary_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=data__storage_dot_storage__pb2.SearchRequest.FromString,
                    response_serializer=data__storage_dot_storage__pb2.SearchResponse.SerializeToString,
            ),
            'GetSystemicReport': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSystemicReport,
                    request_deserializer=data__storage_dot_storage__pb2.GetSystemicReportRequest.FromString,
                    response_serializer=data__storage_dot_storage__pb2.GetSystemicReportResponse.SerializeToString,
            ),
            'Copy': grpc.unary_unary_rpc_method_handler(
                    servicer.Copy,
                    request_deserializer=data__storage_dot_storage__pb2.CopyRequest.FromString,
                    response_serializer=data__storage_dot_storage__pb2.CopyResponse.SerializeToString,
            ),
            'Cut': grpc.unary_unary_rpc_method_handler(
                    servicer.Cut,
                    request_deserializer=data__storage_dot_storage__pb2.CutRequest.FromString,
                    response_serializer=data__storage_dot_storage__pb2.CutResponse.SerializeToString,
            ),
            'DownloadFile': grpc.unary_stream_rpc_method_handler(
                    servicer.DownloadFile,
                    request_deserializer=data__storage_dot_storage__pb2.DownloadFileRequest.FromString,
                    response_serializer=data__storage_dot_storage__pb2.DownloadFileResponse.SerializeToString,
            ),
            'UploadFile': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadFile,
                    request_deserializer=data__storage_dot_storage__pb2.UploadFileRequest.FromString,
                    response_serializer=data__storage_dot_storage__pb2.UploadFileResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'data_storage.DataStorage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataStorage(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_storage.DataStorage/RegisterUser',
            data__storage_dot_storage__pb2.RegisterUserRequest.SerializeToString,
            data__storage_dot_storage__pb2.RegisterUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeregisterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_storage.DataStorage/DeregisterUser',
            data__storage_dot_storage__pb2.DeregisterUserRequest.SerializeToString,
            data__storage_dot_storage__pb2.DeregisterUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetVolume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_storage.DataStorage/SetVolume',
            data__storage_dot_storage__pb2.SetVolumeRequest.SerializeToString,
            data__storage_dot_storage__pb2.SetVolumeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetSystemVolume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_storage.DataStorage/SetSystemVolume',
            data__storage_dot_storage__pb2.SetSystemVolumeRequest.SerializeToString,
            data__storage_dot_storage__pb2.SetSystemVolumeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVolumeReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_storage.DataStorage/GetVolumeReport',
            data__storage_dot_storage__pb2.GetVolumeRequest.SerializeToString,
            data__storage_dot_storage__pb2.GetVolumeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateFolder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_storage.DataStorage/CreateFolder',
            data__storage_dot_storage__pb2.CreateFolderRequest.SerializeToString,
            data__storage_dot_storage__pb2.CreateFolderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Remove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_storage.DataStorage/Remove',
            data__storage_dot_storage__pb2.RemoveRequest.SerializeToString,
            data__storage_dot_storage__pb2.RemoveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ForceRemove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_storage.DataStorage/ForceRemove',
            data__storage_dot_storage__pb2.ForceRemoveRequest.SerializeToString,
            data__storage_dot_storage__pb2.ForceRemoveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EmptyRecycleBin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_storage.DataStorage/EmptyRecycleBin',
            data__storage_dot_storage__pb2.EmptyRecycleBinRequest.SerializeToString,
            data__storage_dot_storage__pb2.EmptyRecycleBinResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BrowseData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_storage.DataStorage/BrowseData',
            data__storage_dot_storage__pb2.BrowseDataRequest.SerializeToString,
            data__storage_dot_storage__pb2.BrowseDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_storage.DataStorage/Search',
            data__storage_dot_storage__pb2.SearchRequest.SerializeToString,
            data__storage_dot_storage__pb2.SearchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSystemicReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_storage.DataStorage/GetSystemicReport',
            data__storage_dot_storage__pb2.GetSystemicReportRequest.SerializeToString,
            data__storage_dot_storage__pb2.GetSystemicReportResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Copy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_storage.DataStorage/Copy',
            data__storage_dot_storage__pb2.CopyRequest.SerializeToString,
            data__storage_dot_storage__pb2.CopyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Cut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_storage.DataStorage/Cut',
            data__storage_dot_storage__pb2.CutRequest.SerializeToString,
            data__storage_dot_storage__pb2.CutResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownloadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/data_storage.DataStorage/DownloadFile',
            data__storage_dot_storage__pb2.DownloadFileRequest.SerializeToString,
            data__storage_dot_storage__pb2.DownloadFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadFile(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/data_storage.DataStorage/UploadFile',
            data__storage_dot_storage__pb2.UploadFileRequest.SerializeToString,
            data__storage_dot_storage__pb2.UploadFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
